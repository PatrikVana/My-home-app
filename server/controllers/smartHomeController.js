import axios from "axios";
import crypto from "crypto";
import dotenv from "dotenv";

dotenv.config();

const ACCESS_ID = process.env.TUYA_ACCESS_ID;
const ACCESS_SECRET = process.env.TUYA_ACCESS_SECRET;
const API_ENDPOINT = "https://openapi.tuyaeu.com";
const DEVICE_ID = process.env.TUYA_DEVICE_ID;

console.log("üîπ ACCESS_ID:", ACCESS_ID);
console.log("üîπ ACCESS_SECRET:", ACCESS_SECRET.length, "(d√©lka by mƒõla b√Ωt p≈ôibli≈ænƒõ 32 znak≈Ø)");

// Funkce pro generov√°n√≠ podpisu
async function generateSign(stringToSign, secret) {
    console.log("üîπ Generov√°n√≠ podpisu...");
    console.log("üîπ String to sign:", stringToSign);

    return crypto.createHmac("sha256", secret)
        .update(stringToSign, "utf8")
        .digest("hex")
        .toUpperCase(); // Tuya API vy≈æaduje velk√° p√≠smena
}

// Z√≠sk√°n√≠ access tokenu
async function getAccessToken(){
    const timestamp = Date.now().toString();

    console.log("üîπ Kontrola timestampu:", timestamp, " D√©lka:", timestamp.length);
    
    // ‚úÖ Opraven√Ω signString (NEOBSAHUJE ACCESS_SECRET!)
    const signString = ACCESS_ID + timestamp;
    const signature = generateSign(signString, ACCESS_SECRET);

    const url = `${API_ENDPOINT}/v1.0/token`;  // ‚úÖ Spr√°vn√Ω endpoint
    const body = { "grant_type": "1" };  // ‚úÖ Oprava JSON tƒõla

    const headers = {
        "client_id": ACCESS_ID,
        "sign": signature,
        "t": timestamp,
        "sign_method": "HMAC-SHA256",
        "Content-Type": "application/json"
    };

    console.log("üîπ Odes√≠l√°m po≈æadavek na URL:", url);
    console.log("üîπ Hlaviƒçky po≈æadavku:", headers);
    console.log("üîπ Tƒõlo po≈æadavku:", body);

    try {
        const response = await axios.post(url, body, { headers });

        console.log("‚úÖ API odpovƒõƒè na z√≠sk√°n√≠ tokenu:", JSON.stringify(response.data, null, 2));

        if (response.data.success) {
            return response.data.result.access_token;
        } else {
            console.error("‚ùå Chyba: Tuya API odpovƒõdƒõlo ne√∫spƒõ≈°nƒõ.");
            return null;
        }
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi z√≠sk√°n√≠ tokenu:", error.response?.data || error.message);
        return null;
    }
}

// API endpoint pro z√≠sk√°n√≠ dat ze senzoru
export const getSensorData = async (req, res) => {
    try {
        const accessToken = await getAccessToken();
        if (!accessToken) {
            return res.status(500).json({ error: "Nepoda≈ôilo se z√≠skat p≈ô√≠stupov√Ω token." });
        }

        const timestamp = Date.now().toString();

        // ‚úÖ Opraven√Ω signString pro z√≠sk√°n√≠ dat ze senzoru
        const signString = ACCESS_ID + timestamp;  // ‚úÖ OPRAVA ‚Äì odstranƒõn ACCESS_SECRET!
        const signature = generateSign(signString, ACCESS_SECRET);


        const response = await axios.get(`${API_ENDPOINT}/v1.0/devices/${DEVICE_ID}/status`, {
            headers: {
                "client_id": ACCESS_ID,
                "access_token": accessToken,
                "sign": signature,
                "t": timestamp,
                "sign_method": "HMAC-SHA256"
            }
        });

        res.json(response.data);
    } catch (error) {
        console.error("‚ùå Chyba p≈ôi naƒç√≠t√°n√≠ dat ze senzoru:", error.response?.data || error.message);
        res.status(500).json({ error: "Nepoda≈ôilo se z√≠skat data ze senzoru." });
    }
};


